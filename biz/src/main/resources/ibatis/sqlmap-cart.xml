<?xml version="1.0" encoding="GB2312"?>
<!DOCTYPE sqlMap
	PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="cart">
	
	<typeAlias alias="cart" type="com.wideka.club.api.cart.bo.Cart" />
	
	<insert id="createCart" parameterClass="cart">
	<![CDATA[
		INSERT
		INTO basis_tb_cart
		  (
			USER_ID,
			SHOP_ID,
			ITEM_ID,
			SKU_ID,
			POINTS_ID,
			QUANTITY,
			STATE,
			CREATE_DATE,
			CREATE_USER,
			MODIFY_DATE,
			MODIFY_USER
		  )
		  VALUES
		  (
			#userId#,
			#shopId#,
			#itemId#,
			#skuId#,
			#pointsId#,
			#quantity#,
			'U',
			NOW(),
			#userId#,
			NOW(),
			#userId#
		  )
	]]>
		<selectKey resultClass="java.lang.Long" keyProperty="cartId">
		<![CDATA[
			SELECT LAST_INSERT_ID()
		]]>
		</selectKey>
	</insert>
	
	<select id="getCartList" parameterClass="cart" resultClass="cart">
	<![CDATA[
		SELECT t.cart_id AS cartId,
			   t.item_id AS itemId,
			   t.sku_id AS skuId,
			   t.points_id AS pointsId,
			   t.quantity
		  FROM basis_tb_cart t
		 WHERE t.state = 'U'
		   AND t.user_id = #userId#
		   AND t.shop_id = #shopId#
		 ORDER BY t.create_date DESC
	]]>
	</select>
	
	<update id="updateCart" parameterClass="cart">
	<![CDATA[
		UPDATE basis_tb_cart t
		   SET t.modify_date = NOW(),
			   t.modify_user = #modifyUser#,
			   t.state = #state#
		 WHERE t.state = 'U'
		   AND t.user_id = #userId#
		   AND t.shop_id = #shopId#
		   AND t.cart_id IN
	]]>
		<iterate property="codes" open="(" close=")" conjunction=",">#codes[]#</iterate>
	</update>
	
	<update id="updateQuantity" parameterClass="cart">
	<![CDATA[
		UPDATE basis_tb_cart t
		   SET t.modify_date = NOW(),
			   t.modify_user = #modifyUser#,
			   t.quantity = #quantity#
		 WHERE t.state = 'U'
		   AND t.user_id = #userId#
		   AND t.shop_id = #shopId#
		   AND t.cart_id = #cartId#
	]]>
	</update>
	
	<select id="getCartStats" parameterClass="cart" resultClass="cart">
	<![CDATA[
		SELECT MIN(p.postage) AS postage,
			   SUM(CASE WHEN k.points_id IS NULL THEN CASE WHEN q.price IS NULL THEN p.price * t.quantity ELSE q.price * t.quantity END ELSE 0 END) AS price,
			   SUM(CASE WHEN k.points IS NULL THEN 0 ELSE k.points * t.quantity END) AS points
		  FROM basis_tb_cart t
		  left join basis_tb_item p on t.item_id= p.item_id
		  left join(
		SELECT qq.sku_id, qq.price
		  FROM basis_tb_item_sku qq
		 WHERE qq.state= 'U') q on t.sku_id = q.sku_id
		  left join(
		SELECT kk.points_id, kk.points
		  FROM basis_tb_points kk
		 WHERE kk.state = 'U'
		   AND kk.shop_id = #shopId#
				 ) k on t.points_id = k.points_id
		 WHERE t.state = 'U'
		   AND p.state = 'U'
		   AND p.shop_id = #shopId#
		   AND t.user_id = #userId#
		   AND t.cart_id  IN 
	]]>
		<iterate property="codes" open="(" close=")" conjunction=",">#codes[]#</iterate>
	</select>

</sqlMap>
